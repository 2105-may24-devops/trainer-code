CI with azure pipelines for one of wezley's batch's project 1s

you'll need to modify the codebase, so we won't use the original repos
    it's possible to keep the pipeline in a different repo than the code,
    but you'll need to do things like adding a Dockerfile and
import the project into azure repos
    (we could just fork it on github, but we'll get a little more
    experience this way)

we've "lost" the original databases and any SQL used to create them,
    so you'll need to write a SQL script yourself to create the database
    in a useful state, based on what you can infer from the project's code
    and documentation.

Dockerize the application, including its database, and write a compose file.
    make it convenient to get up and running with a local instance of the
    application. run any tests during the Docker image build as well.

implement CI in azure pipelines
    if there's a push to the webapp repo on the default branch,
    then the code should be automatically:
        built
        tested
            any available automatable tests should run.
            if there are failures, the build should fail.
            collect the test results in a format that can be
                published to the build in Azure Pipelines.
        analyzed
            we have 9 teams and 4 of my VMs; groups of 2 or 3 teams will set up and share
            each sonarqube instance (see p1 excel sheet).
            (either write a playbook for that, or at least carefully document
            the steps followed.)
            use sonar scanner to run an analysis on the source code.
            (suggested: if the quality gate in sonarcloud fails, don't
                deploy to one of the below environments?)
        deployed to two dev environments:
            1) one using Docker on one of my VMs
            2) one not using Docker on a VM you create
                (suggested: instead of doing it manually, use Ansible to ensure all
                dependencies are installed on that VM)
            you can do this either in YAML, or with classic release pipelines
                triggered from your YAML pipeline.

    if there's a push to the ORM repo on the default branch,
        the same things should happen, so that updates to this dependency of the
        app are incorporated into the app.

    there should be a sensible workflow for pull requests, so that PRs to the
        mainline branch trigger most of the CI checks (without the deployment part),
        and PRs can't be merged if the build fails.

    there should be notifications of significant events like build failures on
        the mainline branch, probably to a slack channel. use your judgment
        to decide if any other events are worthy of notification.

    suggested: run health checks against the running app after deployment.
